package views

import (
"fmt"
"github.com/kylerequez/go-upload-example/src/models"
"github.com/kylerequez/go-upload-example/src/views/layouts"
"strings"
"time"
)

type UploadMessages struct {
Message string
Errors map[string]string
}

func FormatDate(time time.Time) string {
return fmt.Sprintf("%s. %v, %v %v:%v", time.Month(), time.Day(), time.Year(), time.Hour(), time.Minute())
}

func GetFileSize(size int64) string {
const megabyte float64 = 1024 * 1024
value := float64(size) / megabyte

return fmt.Sprintf("%.2f Mb", value)
}

func DisplayMessage(msg string) string {
return strings.Title(strings.ToLower(msg))
}

templ UploadView(
title string,
msg UploadMessages,
files *[]models.File,
file *models.File,
) {
@layouts.MainLayout(
title,
) {
<div class="flex flex-col h-screen w-screen bg-white">
	@Title(title)
	@Uploads(files, file, msg)
</div>
}
}

templ Title(
title string,
) {
<div class="flex items-center justify-center mt-4 p-4">
	<div class="text-4xl font-sans">{ title }</div>
</div>
}

templ Uploads(files *[]models.File, file *models.File, msg UploadMessages) {
<div id="uploads-view" class="flex-auto flex-col">
	@UploadForm(msg)
	@UploadsContainer(files, file, msg)
</div>
}

templ UploadForm(
msg UploadMessages,
) {
<form id="upload-form" enctype="multipart/form-data" hx-post="/api/v1/upload" hx-target="#uploads-view"
	hx-swap="outerHTML" hx-trigger="submit">
	<div class="flex flex-col flex-wrap justify-center items-center mt-4">
		<div class="flex flex-row space-x-4">
			<label class="flex-auto">
				<input name="upload" type="file" class="text-sm text-grey-500
            file:mr-5 file:py-2 file:px-6
            file:rounded-full file:border-0
            file:text-sm file:font-medium
            file:bg-blue-100 file:text-blue-700
            hover:file:cursor-pointer hover:file:bg-amber-50
            hover:file:text-amber-700" />
			</label>
			<button
				class="flex-auto border border-1 rounded-full bg-green-400 hover:bg-green-300 text-sm font-bold text-green-900 px-6"
				type="submit">
				Upload
			</button>
		</div>
		if msg.Errors["upload-err"] != "" {
		<div class="flex flex-row mt-2">
			<div class="text-md font-bold text-red-500">
				{ DisplayMessage(msg.Errors["upload-err"]) }
			</div>
		</div>
		} else if msg.Message != "" {
		<div class="flex flex-row mt-2">
			<div class="text-md font-bold text-green-500">
				{ DisplayMessage(msg.Message) }
			</div>
		</div>
		}
	</div>
</form>
}

templ UploadsContainer(files *[]models.File, file *models.File, msg UploadMessages) {
<div id="uploads-container" class="flex h-screen w-screen flex-row mt-8">
	@UploadsList(files, msg)
	@FileShowcase(file, msg)
</div>
}

templ UploadsList(files *[]models.File, msg UploadMessages) {
<div id="uploads-list" class="flex flex-col min-w-[360px] max-w-[360px]">
	<div class="flex max-h-fit font-semibold text-xl ml-4">
		Upload List
	</div>
	if msg.Errors["get-uploads-err"] != "" {
	<div class="flex font-bold text-red-500 max-h-fit mt-2 ml-8">
		{ DisplayMessage(msg.Errors["get-uploads-err"]) }
	</div>
	} else if msg.Errors["delete-upload-err"] != "" {
	<div class="flex font-bold text-red-500 max-h-fit mt-2 ml-8">
		{ DisplayMessage(msg.Errors["delete-upload-err"]) }
	</div>
	}
	if files != nil && len(*files) > 0 {
	<ul class="flex flex-col max-h-fit mt-2 ml-8 space-y-4 pr-8">
		for _, file := range *files {
		@FileCard(file)
		}
	</ul>
	} else {
	<div class="flex max-h-fit mt-2 ml-8">
		No files...
	</div>
	}
</div>
}

templ FileCard(file models.File) {
<li class="flex flex-col border rounded border-black">
	<div class="flex-auto pl-2 pt-2">
		<span class="text-base font-bold">
			{ fmt.Sprintf("%s.%s", file.Name, file.Type) }
		</span>
	</div>
	<hr class="flex-auto font-bold px-4" />
	<div class="flex-auto pl-4 py-2 text-sm">
		{ GetFileSize(file.Size) }
	</div>
	<hr />
	<div class="flex flex-row-reverse py-1 px-2">
		<button hx-delete={ fmt.Sprintf("/api/v1/upload/%s", file.ID.String()) } hx-target="#uploads-view"
			hx-swap="outerHTML" hx-trigger="click" class="bg-red-500 hover:bg-red-400 border rounded-md p-1 ml-2">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
				class="size-6 text-white">
				<path stroke-linecap="round" stroke-linejoin="round"
					d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0">
				</path>
			</svg>
		</button>
		<button hx-get={ fmt.Sprintf("/api/v1/upload/%s", file.ID.String()) } hx-target="#upload-container"
			hx-swap="outerHTML" hx-trigger="click" class="bg-gray-100 hover:bg-gray-200 border rounded-md p-1">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
				class="size-6">
				<path stroke-linecap="round" stroke-linejoin="round"
					d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z">
				</path>
				<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path>
			</svg>
		</button>
	</div>
</li>
}

templ FileShowcase(file *models.File, msg UploadMessages) {
<div id="upload-container" class="flex-1 p-4">
	<div class="flex border-solid border-2 border-black rounded-lg h-full items-center justify-center p-1">
		if file != nil {
		<img class="max-h-full max-w-full object-fill" src={ fmt.Sprintf("/uploads/%s.%s", file.Name, file.Type) } />
		} else {
		<div class="text-xl">
			Please select a file...
		</div>
		}
		if msg.Errors["get-file-err"] != "" {
		<div class="text-4xl">
			{ DisplayMessage(msg.Errors["get-file-err"]) }
		</div>
		}
	</div>
</div>
}
